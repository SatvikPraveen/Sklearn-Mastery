name: CI/CD Pipeline

on:
  push:
    branches: [main, develop]
  pull_request:
    branches: [main]

concurrency:
  group: ci-${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

permissions:
  contents: read

jobs:
  test:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: ["3.8", "3.9", "3.10", "3.11"]
        dependencies: ["minimal", "latest"]
        exclude:
          # Only test minimal deps on 3.10 to save CI time
          - python-version: "3.8"
            dependencies: "minimal"
          - python-version: "3.9"
            dependencies: "minimal"
          - python-version: "3.11"
            dependencies: "minimal"

    steps:
      - uses: actions/checkout@v4

      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v5
        with:
          python-version: ${{ matrix.python-version }}
          cache: pip

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          if [ "${{ matrix.dependencies }}" == "minimal" ]; then
            pip install -r requirements-minimal.txt || pip install -r requirements.txt
          else
            pip install -r requirements.txt
          fi
          pip install -e .

      - name: Lint with flake8
        run: |
          pip install flake8
          flake8 src/ --count --select=E9,F63,F7,F82 --show-source --statistics
          flake8 src/ --count --exit-zero --max-complexity=10 --max-line-length=100 --statistics

      - name: Check code formatting with black
        run: |
          pip install black
          black --check src/ tests/

      - name: Check import sorting with isort
        run: |
          pip install isort
          isort --check-only src/ tests/

      - name: Type checking with mypy
        run: |
          pip install mypy
          mypy src/ --ignore-missing-imports
        continue-on-error: true

      - name: Run tests with pytest
        run: |
          pip install pytest pytest-cov
          pytest tests/ --cov=src --cov-report=xml:coverage.xml --cov-report=html -v

      - name: Test notebooks
        run: |
          pip install nbval jupyter
          pytest --nbval-lax notebooks/ || echo "Notebook tests completed with warnings"
        continue-on-error: true

      - name: Test visualization utilities
        run: |
          python -c "
          import matplotlib
          matplotlib.use('Agg')
          from src.utils.helpers import VisualizationUtils
          import matplotlib.pyplot as plt
          import tempfile

          fig, ax = plt.subplots()
          ax.plot([1, 2, 3])

          with tempfile.TemporaryDirectory() as tmpdir:
              result = VisualizationUtils.save_figure(fig, 'test_fig', folder=tmpdir)
              print('âœ… Visualization utilities working')
          "

      - name: Generate test report
        if: always()
        run: |
          pip install pytest-html
          pytest tests/ --html=test-report.html --self-contained-html || true

      - name: Upload test artifacts
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: test-results-py${{ matrix.python-version }}-${{ matrix.dependencies }}
          path: |
            test-report.html
            coverage.xml
            htmlcov/

      - name: Upload coverage to Codecov
        uses: codecov/codecov-action@v4
        with:
          files: ./coverage.xml
          flags: unittests
          fail_ci_if_error: false

  security:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: 3.9
          cache: pip

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          pip install safety bandit

      - name: Check for security vulnerabilities
        run: |
          safety check || true
          bandit -r src/ -f json -o bandit-report.json || true

      - name: Upload bandit report
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: bandit-report
          path: bandit-report.json

  docs:
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'
    permissions:
      contents: write

    steps:
      - uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: 3.9
          cache: pip

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          pip install jupyter-book

      - name: Build documentation
        run: |
          jupyter-book build notebooks/ --path-output docs/

      - name: Deploy to GitHub Pages
        uses: peaceiris/actions-gh-pages@v3
        if: github.ref == 'refs/heads/main'
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}
          publish_dir: ./docs/_build/html
